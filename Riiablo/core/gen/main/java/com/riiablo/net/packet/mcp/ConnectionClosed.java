// automatically generated by the FlatBuffers compiler, do not modify

package com.riiablo.net.packet.mcp;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ConnectionClosed extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static ConnectionClosed getRootAsConnectionClosed(ByteBuffer _bb) { return getRootAsConnectionClosed(_bb, new ConnectionClosed()); }
  public static ConnectionClosed getRootAsConnectionClosed(ByteBuffer _bb, ConnectionClosed obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ConnectionClosed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String reason() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reasonAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer reasonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createConnectionClosed(FlatBufferBuilder builder,
      int reasonOffset) {
    builder.startTable(1);
    ConnectionClosed.addReason(builder, reasonOffset);
    return ConnectionClosed.endConnectionClosed(builder);
  }

  public static void startConnectionClosed(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addReason(FlatBufferBuilder builder, int reasonOffset) { builder.addOffset(0, reasonOffset, 0); }
  public static int endConnectionClosed(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ConnectionClosed get(int j) { return get(new ConnectionClosed(), j); }
    public ConnectionClosed get(ConnectionClosed obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

