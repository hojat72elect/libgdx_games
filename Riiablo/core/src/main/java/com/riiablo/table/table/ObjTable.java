// automatically generated by TableCodeGenerator, do not modify
package com.riiablo.table.table;

import javax.annotation.Generated;

import com.badlogic.gdx.utils.IntArray;

import com.riiablo.Riiablo;
import com.riiablo.logger.LogManager;
import com.riiablo.logger.Logger;
import com.riiablo.table.Manifest;
import com.riiablo.table.Parser;
import com.riiablo.table.ParserInput;
import com.riiablo.table.Serializer;
import com.riiablo.table.Table;
import com.riiablo.table.parser.ObjParser;
import com.riiablo.table.schema.Obj;
import com.riiablo.table.serializer.ObjSerializer;

@Generated(
    value = "com.riiablo.table.annotation.TableCodeGenerator",
    date = "2020-12-31T01:47:43-08:00",
    comments = "com.riiablo.table.schema.Obj"
)
public final class ObjTable extends Table<Obj> {
  private static final Logger log = LogManager.getLogger(ObjTable.class);

  public ObjTable(Manifest manifest) {
    super(manifest, Obj.class, 53, 0.8f);
  }

  @Override
  protected Obj newRecord() {
    return new Obj();
  }

  @Override
  protected Parser<Obj> newParser(ParserInput arg0) {
    return new ObjParser(arg0);
  }

  @Override
  protected Serializer<Obj> newSerializer() {
    return new ObjSerializer();
  }

  @Override
  protected int offset() {
    return 0;
  }

  @Override
  protected boolean indexed() {
    return true;
  }

  @Override
  protected boolean preload() {
    return false;
  }

  @Override
  protected String primaryKey() {
    return "Act";
  }
  private static final int MAX_ACTS = Riiablo.NUM_ACTS;
  private static final int INITIAL_ENTRIES = 150;

  /** stores act-specific list of obj codes */
  private static final IntArray[] lookup = new IntArray[MAX_ACTS + 1]; {
    for (int act = 1; act <= MAX_ACTS; act++) {
      lookup[act] = new IntArray(INITIAL_ENTRIES);
    }
  }

  @Override
  protected void put(int id, Obj record) {
    super.put(id, record);
    final IntArray lookup = this.lookup[record.Act];
    lookup.add(id);
    log.trace("lookup[{}][{}] = {} ({})", record.Act, lookup.size - 1, record, id);
  }

  public Obj get(int act, int id) {
    return get(lookup[act].get(id));
  }

  public int getObjectId(int act, int id) {
    return get(act, id).ObjectId;
  }

  public int getSize(int act) {
    return lookup[act].size;
  }
}
